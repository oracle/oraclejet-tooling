/**
  Copyright (c) 2015, 2025, Oracle and/or its affiliates.
  Licensed under The Universal Permissive License (UPL), Version 1.0
  as shown at https://oss.oracle.com/licenses/upl/

*/
module.exports = {
  /**
   *
   * @param {object} options.context - ojet build context which contains useful fields like
   * buildType
   * @param {object} options.config - Default webpack config generated by ojet. You can
   * add to it, remove from it or update it using webpack-merge which was
   * installed alongside webpack. If desired, you can create your own config
   * and return it which will override the default config. Consider the examples below:
   *
   * 1. Adding a new plugin or optimization configuration into the default config:
   *
   *    config.plugins.push(new SomeWebpackPlugin());
   *
   *    config.optimization = {...config.optimization, splitChunks: { chunks: 'async' }};
   *
   *    config.output.publicPath = 'https://yourcdnlink.com/';
   *
   * 2. Alternatively, you can implement a custom config to override the default:
   *
   *    config = {};
   *
   *    config.plugins = [new SomeWebpackPlugin()];
   *
   *    config.optimization = {minimize: true, splitChunks: { chunks: 'all' }};
   *
   *    config.module.rules.push({test: /\.css$/, use: ['style-loader', 'css-loader']});
   *
   *    config.devServer = {static: {directory: path.join(_dirname, 'web')}, hot: true, port: 9000};
   *
   * @returns {object|undefined}
   */
  webpack: ({ context, config }) => {
    if (context.buildType === 'release') {
      // update config with release / production options
    } else {
      // update config with development options
    }
    // only have to return if new config object was created but
    // since it doesn't matter always returning the config is good
    // practice
    return { context, webpack: config };
  }
};
